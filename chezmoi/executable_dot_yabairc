#!/usr/bin/env sh

# https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(latest-release)
# the scripting-addition must be loaded manually if
# you are running yabai on macOS Big Sur. Uncomment
# the following line to have the injection performed
# when the config is executed during startup.
#
# for this to work you must configure sudo such that
# it will be able to run the command without password

yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"
sudo yabai --load-sa

move_to_space() {
  id=$(yabai -m query --windows | jq ".[] | select(.app | contains(\"$1\")) | .id")

  if [ -n "$id" ]; then
    yabai -m window "$id" --space "$2"
  fi
}

# global settings
yabai -m config mouse_follows_focus on
yabai -m config focus_follows_mouse off # autofocus|autoraise|off
yabai -m config window_placement second_child
yabai -m config window_topmost off # Make floating windows stay on top
yabai -m config window_opacity off # turning it on reduces overall performance?
yabai -m config window_opacity_duration 0.0
yabai -m config window_shadow on
yabai -m config insert_feedback_color 0xaad75f5f
yabai -m config active_window_opacity 1.0
yabai -m config normal_window_opacity 0.85
yabai -m config split_ratio 0.50
yabai -m config auto_balance off
yabai -m config mouse_modifier fn
yabai -m config mouse_action1 move
yabai -m config mouse_action2 resize
yabai -m config mouse_drop_action stack
yabai -m config external_bar main:42:0
yabai -m config window_origin_display focused
# yabai -m config external_bar main:28:48
yabai -m config window_animation_duration 0.0

# borders are removed since 6.0.0, use JankyBorders instead https://github.com/FelixKratz/JankyBorders
# yabai -m config window_border on
# yabai -m config window_border_width 2
# yabai -m config active_window_border_color 0xA006B6D4
# yabai -m config normal_window_border_color 0x5006B600
# yabai -m config window_border_hidpi on
# yabai -m config window_border_blur off
borders active_color=0xC0FF8552 inactive_color=0x3006B6D4 width=10.0 hidpi=on &

# general space settings
yabai -m config layout bsp
yabai -m config top_padding 8
yabai -m config bottom_padding 8
yabai -m config left_padding 8
yabai -m config right_padding 8
yabai -m config window_gap 8

# specific space settings
# yabai -m space 1 --layout stack

# signals
# focus mouse hovered window when a window is closed, minimized or terminated
# yabai -m signal --add event=window_destroyed action="yabai -m query --windows --window &> /dev/null || yabai -m window --focus mouse"
# yabai -m signal --add event=window_minimized action="yabai -m query --windows --window &> /dev/null || yabai -m window --focus mouse"
# yabai -m signal --add event=application_terminated action="yabai -m query --windows --window &> /dev/null || yabai -m window --focus mouse"
# yabai -m signal --add event=space_changed action="sleep 0.2 ; yabai -m query --windows --window &> /dev/null || yabai -m window --focus mouse"

# yabai -m signal --add event=window_created action="~/.yabai_axunknown_float"

# Yabai-Spaces for BitBar
# yabai -m signal --add event=space_changed action="open -gj 'bitbar://refreshPlugin?name=yabai.1d.sh'"
# yabai -m signal --add event=display_added action="open -gj 'bitbar://refreshPlugin?name=yabai.1d.sh'"
# yabai -m signal --add event=display_removed action="open -gj 'bitbar://refreshPlugin?name=yabai.1d.sh'"
# yabai -m signal --add event=display_changed action="open -gj 'bitbar://refreshPlugin?name=yabai.1d.sh'"
# yabai -m signal --add event=display_moved action="open -gj 'bitbar://refreshPlugin?name=yabai.1d.sh'"

# sh ~/.yabai_rules

yabai -m rule --add label="1Password" app="^1Password$" manage=off
yabai -m rule --add label="1Password 7" app="^1Password 7$" manage=off
# yabai -m rule --add label="Browserosaurus" app="^Browserosaurus$" manage=off
yabai -m rule --add label="Arc PiP" app="^Arc$" title="^$" manage=off
yabai -m rule --add label="Little Arc Launcher" app="^Arc$" title="^Space 1$" manage=off
yabai -m rule --add label="Activity Monitor" app="^Activity Monitor$" manage=off
yabai -m rule --add label="Alfred Preferences" app="^Alfred Preferences$" manage=off
yabai -m rule --add label="App Store" app="^App Store$" manage=off
yabai -m rule --add label="Boom 3D" app="^Boom 3D$" manage=off
yabai -m rule --add label="Calculator" app="^Calculator$" manage=off
yabai -m rule --add label="Chromium" app="^Chromium$" manage=off
yabai -m rule --add label="CleanMyMac X" app="^CleanMyMac X$" manage=off
yabai -m rule --add label="Dash" app="Dash" manage=off
# yabai -m rule --add label="Dictionary" app="^Dictionary$" manage=off
# yabai -m rule --add label="Fantastical" app="Fantastical" manage=off
yabai -m rule --add label="Fig Autocomplete" app="^Fig$" title="^Fig Autocomplete$" manage=off
# yabai -m rule --add label="Finder Main" app="^Finder$" manage=off
yabai -m rule --add label="Finder" app="^Finder$" title="(Co(py|nnect)|Move|Info|Pref)" manage=off
# yabai -m rule --add label="Firefox" app="Firefox" manage=off
yabai -m rule --add label="Gather" app="^Gather$" manage=off
yabai -m rule --add label="KeyCastr" app="KeyCastr" manage=off
yabai -m rule --add label="Kit" app="Kit" title="^Script Kit Widget$" manage=off
yabai -m rule --add label="Steam" app="Steam" manage=off
yabai -m rule --add label="GoPro Webcam" app="GoPro Webcam" manage=off
yabai -m rule --add label="Loom" app="Loom" manage=off
yabai -m rule --add label="Nebula" app="Nebula" manage=off
yabai -m rule --add label="Notion" app="Notion" manage=off
yabai -m rule --add label="NotionQuickAdd" app="NotionQuickAdd" manage=off
yabai -m rule --add label="Preview" app="Preview" manage=off
# yabai -m rule --add label="Safari" app="^Safari$" title="^(General|(Tab|Password|Website|Extension)s|AutoFill|Se(arch|curity)|Privacy|Advance)$" manage=off
yabai -m rule --add label="Session" app="^Session$" manage=off border=off
yabai -m rule --add label="Slidepad" app="^Slidepad$" manage=off border=off
yabai -m rule --add label="Stickies" app="Stickies" manage=off border=off
yabai -m rule --add label="System Preferences" app="^System Preferences$" manage=off
# yabai -m rule --add label="The Unarchiver" app="^The Unarchiver$" manage=off
# yabai -m rule --add label="Time Out" app="Time Out" manage=off
# yabai -m rule --add label="Transmission" app="^Transmission$" manage=off
yabai -m rule --add label="VirtualBox" app="^VirtualBox$" manage=off
yabai -m rule --add label="Electron" app="^Electron$" manage=off
yabai -m rule --add label="OpenIn" app="^OpenIn$" mouse_follows_focus=off
yabai -m rule --add label="Hammerspoon" app="^Hammerspoon$" manage=off

# Sticky windows
yabai -m rule --add label="Obsidian" app="^Obsidian$" manage=off sticky=on

# Ignore everything without title
yabai -m rule --add label="untitled" app=".+" title="^$" manage=off

DISPLAY_COUNT=$(yabai -m query --displays | jq length)
SPACE_COUNT=$(yabai -m query --spaces --display 1 | jq length)
SPACE_2ND_DSP=$(yabai -m query --displays | jq '.[] | select(.index == 2) | .spaces[0]')

# Create more spaces if insufficient
if [ "$SPACE_COUNT" -lt 5 ]; then
  for _i in $(seq 1 $((5 - SPACE_COUNT))); do
    yabai -m space --create
  done
fi

# Label spaces
yabai -m space 1 --label "Term"
yabai -m space 2 --label "Editor"
yabai -m space 3 --label "Browse"
yabai -m space 4 --label "Misc"

if [ "$DISPLAY_COUNT" = "1" ]; then
  yabai -m space 5 --label "OffScreen"
else
  yabai -m space "$SPACE_2ND_DSP" --label "OffScreen"
fi

# Move all windows to Space 4 (Misc) by default
yabai -m space Misc --layout stack
yabai -m rule --add app=".*" label="All Apps" space=4
yabai -m rule --remove "All Apps"

# Spaces
## Space 1: Terminals
# yabai -m rule --add app="kitty" title=".+" space=Term
move_to_space "kitty" Term
# yabai -m rule --add app="iTerm2" title=".+" space=Term
move_to_space "iTerm2" Term

## Space 2: Editor
# yabai -m rule --add app="Code" title=".+" space=Editor
move_to_space "Code" Editor

## Space 3: Browsing / Notes
# yabai -m rule --add app="Arc" title=".+" space=Browse
move_to_space "Arc" Browse
# yabai -m rule --add app="Chrome" title=".+" space=Browse
move_to_space "Chrome" Browse
# yabai -m rule --add app="Microsoft Edge" title=".+" space=Browse
move_to_space Microsoft "Edge" Browse
# yabai -m rule --add app="Opera GX" title=".+" space=Browse
move_to_space Opera "GX" Browse

## Space 4: Misc (Stacked)
yabai -m space Misc --layout stack
yabai -m space Misc --padding abs:32:32:32:32

## Space 5 / Display 2 Space 1 : Off Screen
yabai -m space OffScreen --layout stack

# yabai -m rule --add app="1Password" title=".+" space=OffScreen
move_to_space "1Password" OffScreen
# yabai -m rule --add app="Discord" title=".+" space=OffScreen
move_to_space "Discord" OffScreen
# yabai -m rule --add app="Fantastical" title=".+" space=OffScreen
move_to_space "Fantastical" OffScreen
# yabai -m rule --add app="OBS" title=".+" space=OffScreen
move_to_space "OBS" OffScreen
# yabai -m rule --add app="Slack" title=".+" space=OffScreen
move_to_space "Slack" OffScreen
# yabai -m rule --add app="Sonixd" title=".+" space=OffScreen
move_to_space "Sonixd" OffScreen
# yabai -m rule --add app="Spark" title=".+" space=OffScreen
move_to_space "Spark" OffScreen
# yabai -m rule --add app="Spotify" title=".+" space=OffScreen
move_to_space "Spotify" OffScreen
# yabai -m rule --add app="Streamlabs" title=".+" space=OffScreen
move_to_space "Streamlabs" OffScreen

# Simple-bar signals
# # Refresh spaces widget on space change
# yabai -m signal --add event=space_changed action="osascript -e 'tell application id \"tracesOf.Uebersicht\" to refresh widget id \"simple-bar-spaces-jsx\"'"
# # Refresh spaces widget on display focus change
# yabai -m signal --add event=display_changed action="osascript -e 'tell application id \"tracesOf.Uebersicht\" to refresh widget id \"simple-bar-spaces-jsx\"'"
# # Refresh process widget on space change
# yabai -m signal --add event=space_changed action="osascript -e 'tell application id \"tracesOf.Uebersicht\" to refresh widget id \"simple-bar-process-jsx\"'"

# # Refresh process widget on when focused application changes
# yabai -m signal --add event=window_focused action="osascript -e 'tell application id \"tracesOf.Uebersicht\" to refresh widget id \"simple-bar-process-jsx\"'"
# # Refresh spaces widget on when focused application changes
# yabai -m signal --add event=window_focused action="osascript -e 'tell application id \"tracesOf.Uebersicht\" to refresh widget id \"simple-bar-spaces-jsx\"'"

# # Refresh process widget on when focused application changes
# yabai -m signal --add event=application_front_switched action="osascript -e 'tell application id \"tracesOf.Uebersicht\" to refresh widget id \"simple-bar-process-jsx\"'"
# # Refresh spaces widget on when focused application changes
# yabai -m signal --add event=application_front_switched action="osascript -e 'tell application id \"tracesOf.Uebersicht\" to refresh widget id \"simple-bar-spaces-jsx\"'"

# # Refresh process widget on when an application window is closed
# yabai -m signal --add event=window_destroyed action="osascript -e 'tell application id \"tracesOf.Uebersicht\" to refresh widget id \"simple-bar-process-jsx\"'"
# # Refresh spaces widget on when an application window is closed
# yabai -m signal --add event=window_destroyed action="osascript -e 'tell application id \"tracesOf.Uebersicht\" to refresh widget id \"simple-bar-spaces-jsx\"'"

# # Refresh process widget when current window title changes
# yabai -m signal --add event=window_title_changed action="osascript -e 'tell application id \"tracesOf.Uebersicht\" to refresh widget id \"simple-bar-process-jsx\"'"

# yabai -m signal --add event=window_created label="focus-floating-windows" action='sh ~/.yabai.focus-floating-windows.sh $YABAI_WINDOW_ID'
# yabai -m signal --add event=window_created label="window-created-debug" action='echo "[window_created] window id: $YABAI_WINDOW_ID" >> /tmp/yabai.txt'
# yabai -m signal --add event=window_focused label="window-focused-debug" action='echo "[window_focused] window id: $YABAI_WINDOW_ID" >> /tmp/yabai.txt'

# Re-focus
# yabai -m signal --add event=window_focused label="move-window-focused-to-mouse" action='yabai -m window --focus $YABAI_WINDOW_ID ; yabai -m window $YABAI_WINDOW_ID --toggle topmost'
# yabai -m signal --add event=window_focused label="move-window-focused-to-mouse" action='echo "ididid"$(yabai -m query --windows --window | jq .id) >> /tmp/yabai.txt'
# yabai -m signal --add event=window_focused label="move-window-focused-to-mouse" action='yabai -m window $YABAI_WINDOW_ID --toggle topmost ; echo "topmosting $YABAI_WINDOW_ID" >> /tmp/yabai.txt'

yabai -m signal --add event=window_created label="focus-created-window" action='sh ~/.yabai.focus-standard-window.sh $YABAI_WINDOW_ID'

yabai -m space --focus 1

echo "yabai configuration loaded.."
