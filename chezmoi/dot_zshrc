# export USE_ZIM=1
# export USE_STARSHIP=1

export USE_ZINIT=1

# export USE_ZPM=1

export SHOW_LOAD_TIME=1

function get_ms() {
  print $(($(perl -MTime::HiRes=time -e 'printf "%.3f\n", time') * 1000)) | bc
}

if [[ -n "$USE_ZIM" ]]; then
  TIME_START=$(get_ms)
  source ~/.config/zsh/plugin-managers/zim.zsh
  TIME_END=$(get_ms)

  if [[ -n "$SHOW_LOAD_TIME" ]]; then
    echo "Time used for zim: $((TIME_END - TIME_START)) ms"
  fi
fi

if [[ -n "$USE_ZINIT" ]]; then
  TIME_START=$(get_ms)
  source ~/.config/zsh/plugin-managers/zinit.zsh
  TIME_END=$(get_ms)

  if [[ -n "$SHOW_LOAD_TIME" ]]; then
    echo "Time used for zinit: $((TIME_END - TIME_START)) ms"
  fi
fi

if [[ -n "$USE_ZPM" ]]; then
  TIME_START=$(get_ms)
  source ~/.config/zsh/plugin-managers/zpm.zsh
  TIME_END=$(get_ms)

  if [[ -n "$SHOW_LOAD_TIME" ]]; then
    echo "Time used for zpm: $((TIME_END - TIME_START)) ms"
  fi
fi

export EDITOR=nvim
export TERM=xterm-256color
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin
export PATH="/Applications/Postgres.app/Contents/Versions/latest/bin:$PATH"
export PATH="$PATH:${HOME}/.krew/bin"
export PATH="$PATH:${HOME}/.local/bin"
export PATH="$PATH:$HOME/.arkade/bin"

source ~/.config/zsh/vars.zsh

# force zsh-you-should-use
# export YSU_HARDCORE=1

# export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES

# History
# https://unix.stackexchange.com/questions/273861/unlimited-history-in-zsh
HISTFILE="$HOME/.zsh_history"
HISTSIZE=10000000
SAVEHIST=10000000
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.

ulimit -n 8192

# POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(user dir vcs rbenv rspec_stats newline)
# POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status root_indicator ip background_jobs history time)

# Prefer using emacs mode for zsh
bindkey -e

# Export environment variables.
export GPG_TTY=$TTY

# Autoload functions.
autoload -Uz zmv

# Define functions and completions.
# function md() { [[ $# == 1 ]] && mkdir -p -- "$1" && cd -- "$1" }
# compdef _directories md

# Define aliases.
alias tree='tree -a -I .git'

# Add flags to existing aliases.
alias ls="${aliases[ls]:-ls} -A"

# Set shell options: http://zsh.sourceforge.net/Doc/Release/Options.html.
setopt glob_dots     # no special treatment for file names with a leading dot
setopt no_auto_menu  # require an extra TAB press to open the completion menu

# x86 brew bin (3rd)
if [ -f /usr/local/bin/brew ]; then
  eval $(/usr/local/bin/brew shellenv)
fi

# arm64 brew (2nd)
if [ -f /opt/homebrew/bin/brew ]; then
  eval $(/opt/homebrew/bin/brew shellenv)
fi

# user brew (1st)
if [ -f ~/homebrew/bin/brew ]; then
  eval $(~/homebrew/bin/brew shellenv)
fi

# Cleanup duplicated PATHs (mostly from shellenv evals above)
PATH="$(perl -e 'print join(":", grep { not $seen{$_}++ } split(/:/, $ENV{PATH}))')"

if [ -f "$HOME/.zshrc.local" ]; then
  source "$HOME/.zshrc.local"
fi

# NixOS
if [ -e ~/.nix-profile/etc/profile.d/nix.sh ]; then
  . ~/.nix-profile/etc/profile.d/nix.sh;
fi

# Zoxide : prompt hook mode
if command -v zoxide &> /dev/null; then
  eval "$(zoxide init zsh --hook prompt)"
fi

# Source additional zsh config files (now handled in z4h.zsh)

# Use mise (https://mise.jdx.dev) instead of asdf
if command -v mise &> /dev/null; then
  eval "$(mise activate zsh)"
else
  source $HOME/.asdf/asdf.sh

  if [ -d "$HOME/.asdf/plugins/direnv" ]; then
    # Old hook script
    # eval "$(asdf exec direnv hook zsh)"
    # direnv() { asdf exec direnv "$@"; }

    # New hook script
    if [ -s "${XDG_CONFIG_HOME:-$HOME/.config}/asdf-direnv/zshrc" ]; then
      source "${XDG_CONFIG_HOME:-$HOME/.config}/asdf-direnv/zshrc"
    fi
  fi

  if [ -d "$HOME/.asdf/plugins/flutter" ]; then
    export FLUTTER_ROOT="$(asdf where flutter)"
  fi
fi

# Timing App Terminal Support
if [ $ITERM_SESSION_ID ]; then
  DISABLE_AUTO_TITLE="true"
  echo -ne "\033]0; @ ${HOST%%.*} : ${PWD/#$HOME/~} \007"
fi

precmd() {
  echo -ne "\033]0; @ ${HOST%%.*} : ${PWD/#$HOME/~} \007"
}

# bun completions
[ -s "$HOME/.bun/_bun" ] && source "$HOME/.bun/_bun"

# Bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

# Extend bin PATH.
path=(./bin ~/bin $path)

# Extend fpath for custom completions.
fpath=(~/.config/zsh/completions $fpath)

zsh-defer source $HOME/.config/zsh/config/00_aliases.zsh
source $HOME/.config/zsh/config/10_options.zsh
zsh-defer source $HOME/.config/zsh/config/20_functions.zsh

# Nix
if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
  . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
fi

# pnpm
export PNPM_HOME="$HOME/Library/pnpm"
export PATH="$PNPM_HOME:$PATH"

# Hishtory Config:
export PATH="$PATH:$HOME/.hishtory"
[ -s "$HOME/.hishtory/config.zsh" ] && zsh-defer source $HOME/.hishtory/config.zsh

# Pulumi
[ -d "$HOME/.pulumi" ] && export PATH="$PATH:$HOME/.pulumi/bin"

if [[ -n "$USE_STARSHIP" ]]; then
  # Install starship if not installed
  if ! command -v starship &> /dev/null; then
    echo "Starship not found, installing..."
    curl -sS https://starship.rs/install.sh | sh -s -- --yes
  fi

  zsh-defer eval "$(starship init zsh)"
fi

# Generated for envman. Do not edit.
[ -s "$HOME/.config/envman/load.sh" ] && source "$HOME/.config/envman/load.sh"
